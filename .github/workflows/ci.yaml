name: "ci"

on:
  pull_request:
    types: [ "opened", "synchronize", "edited", "reopened" ]
    paths-ignore:
      - "docs/**"
  push:
    branches:
      - "v[0-9]+.[0-9x]+"
    paths-ignore:
      - "docs/**"
  schedule:
    - cron: "0 8 * * 1" # At 08:00 on Monday

env:
  php-extensions: "json, sodium"
  php-tools: "composer:v2"

jobs:
  coding-standard:
    name: "Coding standard"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        php-version: [ "7.4" ]
        operating-system: [ "ubuntu-latest" ]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Create PHP extensions cache key"
        uses: "actions/github-script@v3"
        id: "php-extensions-cache-key"
        with:
          script: "return '${{ env.php-extensions }}'.replace(' ', '').replace(',', '+');"
          result-encoding: "string"

      - name: "Setup PHP cache environment"
        id: "php-extensions-cache"
        uses: "shivammathur/cache-extensions@v1"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          key: "${{ steps.php-extensions-cache-key.outputs.result }}"

      - name: "Cache PHP extensions"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-extensions-cache.outputs.dir }}"
          key: "${{ steps.php-extensions-cache.outputs.key }}"
          restore-keys: "${{ steps.php-extensions-cache.outputs.key }}"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          tools: "${{ env.php-tools }}"

      - name: "Setup problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Get Composer cache directory"
        id: "php-composer-cache"
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

      - name: "Cache PHP dependencies"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
          restore-keys: "${{ runner.os }}-composer-"

      - name: "Validate Composer"
        run: "composer validate"

      - name: "Install PHP dependencies"
        run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable"

      - name: "Cache PHP_CodeSniffer data"
        uses: "actions/cache@v2"
        with:
          path: "var/build-tools/PHP_CodeSniffer"
          key: "${{ runner.os }}-codesniffer"
          restore-keys: "${{ runner.os }}-codesniffer"

      - name: "Coding Standard"
        run: "make cs ARGS='--report=checkstyle -q | vendor/bin/cs2pr'"

  static-analysis:
    name: "Static analysis"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        php-version: [ "7.4" ]
        operating-system: [ "ubuntu-latest" ]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Create PHP extensions cache key"
        uses: "actions/github-script@v3"
        id: "php-extensions-cache-key"
        with:
          script: "return '${{ env.php-extensions }}'.replace(' ', '').replace(',', '+');"
          result-encoding: "string"

      - name: "Setup PHP cache environment"
        id: "php-extensions-cache"
        uses: "shivammathur/cache-extensions@v1"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          key: "${{ steps.php-extensions-cache-key.outputs.result }}"

      - name: "Cache PHP extensions"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-extensions-cache.outputs.dir }}"
          key: "${{ steps.php-extensions-cache.outputs.key }}"
          restore-keys: "${{ steps.php-extensions-cache.outputs.key }}"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          tools: "${{ env.php-tools }}"

      - name: "Setup problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Get Composer cache directory"
        id: "php-composer-cache"
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

      - name: "Cache PHP dependencies"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
          restore-keys: "${{ runner.os }}-composer-"

      - name: "Validate Composer"
        run: "composer validate"

      - name: "Install PHP dependencies"
        run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable"

      - name: "Cache PHPStan data"
        uses: "actions/cache@v2"
        with:
          path: "var/build-tools/PHPStan"
          key: "${{ runner.os }}-phpstan"
          restore-keys: "${{ runner.os }}-phpstan"

      - name: "PHPStan"
        run: "make phpstan"

  tests:
    name: "Tests"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        php-version: [ "7.4" ]
        operating-system: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
        composer-flags: [ "" ]
        include:
          - php-version: "7.4"
            operating-system: "ubuntu-latest"
            composer-flags: "--prefer-lowest"
          - php-version: "8.0"
            operating-system: "ubuntu-latest"
            composer-flags: "--ignore-platform-req=php"
      fail-fast: false

    continue-on-error: "${{ matrix.php-version == '8.0' }}"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Create PHP extensions cache key"
        uses: "actions/github-script@v3"
        id: "php-extensions-cache-key"
        with:
          script: "return '${{ env.php-extensions }}'.replace(' ', '').replace(',', '+');"
          result-encoding: "string"

      - name: "Setup PHP cache environment"
        id: "php-extensions-cache"
        uses: "shivammathur/cache-extensions@v1"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          key: "${{ steps.php-extensions-cache-key.outputs.result }}"

      - name: "Cache PHP extensions"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-extensions-cache.outputs.dir }}"
          key: "${{ steps.php-extensions-cache.outputs.key }}"
          restore-keys: "${{ steps.php-extensions-cache.outputs.key }}"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          tools: "${{ env.php-tools }}"

      - name: "Setup problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Get Composer cache directory"
        id: "php-composer-cache"
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

      - name: "Cache PHP dependencies"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
          restore-keys: "${{ runner.os }}-composer-"

      - name: "Install PHP dependencies"
        run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable ${{ matrix.composer-flags }}"

      - name: "Cache PHPUnit data"
        uses: "actions/cache@v2"
        with:
          path: "var/build-tools/PHPUnit"
          key: "${{ runner.os }}-phpunit"
          restore-keys: "${{ runner.os }}-phpunit"

      - name: "Setup problem matchers for PHPUnit"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'

      - name: "Tests"
        run: "make tests"

      - name: "Upload logs"
        uses: "actions/upload-artifact@v2"
        with:
          name: "Logs"
          path: "var/logs"
          if-no-files-found: "ignore"

  tests-code-coverage:
    name: "Tests with code coverage"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        php-version: [ "7.4" ]
        operating-system: [ "ubuntu-latest" ]

    if: "github.event_name == 'push'"

    steps:
      - name: "Check if other steps should be executed"
        uses: "actions/github-script@v3"
        id: "should-run"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          result-encoding: "string"
          script: |
            result = await github.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
            })
            ref = 'refs/heads/' + result.data.default_branch;
            return ref === context.ref ? 'yes' : 'no';

      - name: "Checkout"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        uses: "actions/checkout@v2"

      - name: "Create PHP extensions cache key"
        uses: "actions/github-script@v3"
        id: "php-extensions-cache-key"
        with:
          script: "return '${{ env.php-extensions }}'.replace(' ', '').replace(',', '+');"
          result-encoding: "string"

      - name: "Setup PHP cache environment"
        id: "php-extensions-cache"
        uses: "shivammathur/cache-extensions@v1"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          key: "${{ steps.php-extensions-cache-key.outputs.result }}"

      - name: "Cache PHP extensions"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-extensions-cache.outputs.dir }}"
          key: "${{ steps.php-extensions-cache.outputs.key }}"
          restore-keys: "${{ steps.php-extensions-cache.outputs.key }}"

      - name: "Install PHP"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          tools: "${{ env.php-tools }}"

      - name: "Setup problem matchers for PHP"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Get Composer cache directory"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        id: "php-composer-cache"
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

      - name: "Cache PHP dependencies"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
          restore-keys: "${{ runner.os }}-composer-"

      - name: "Install PHP dependencies"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable"

      - name: "Cache PHPUnit data"
        uses: "actions/cache@v2"
        with:
          path: "var/build-tools/PHPUnit"
          key: "${{ runner.os }}-phpunit"
          restore-keys: "${{ runner.os }}-phpunit"

      - name: "Setup problem matchers for PHPUnit"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'

      - name: "Tests"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        run: "make coverage-clover"

      - name: "Coveralls.io"
        if: "${{ steps.should-run.outputs.result == 'yes' }}"
        env:
          COVERALLS_REPO_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          composer global require php-coveralls/php-coveralls
          php-coveralls -v --config build/.coveralls.yml
